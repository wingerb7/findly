name: Findly AI Search CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: findly_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ai_shopify_search/requirements_minimal.txt
        pip install -r ai_shopify_search/requirements_dev.txt
    
    - name: Create necessary directories
      run: |
        mkdir -p logs
        mkdir -p data/databases
        mkdir -p reports
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/findly_test" >> $GITHUB_ENV
        echo "REDIS_HOST=localhost" >> $GITHUB_ENV
        echo "REDIS_PORT=6379" >> $GITHUB_ENV
        echo "REDIS_DB=0" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> $GITHUB_ENV
    
    - name: Wait for services
      run: |
        echo "Waiting for PostgreSQL..."
        while ! pg_isready -h localhost -p 5432 -U postgres; do
          sleep 1
        done
        echo "PostgreSQL is ready!"
        
        echo "Waiting for Redis..."
        while ! redis-cli -h localhost -p 6379 ping; do
          sleep 1
        done
        echo "Redis is ready!"
    
    - name: Start FastAPI server
      run: |
        cd ai_shopify_search
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        echo $! > server.pid
        sleep 10  # Wait for server to start
    
    - name: Wait for server
      run: |
        echo "Waiting for FastAPI server..."
        for i in {1..30}; do
          if curl -f http://localhost:8000/health; then
            echo "Server is ready!"
            break
          fi
          sleep 2
        done
    
    - name: Run tests
      run: |
        cd ai_shopify_search
        pytest tests/ -v --junitxml=reports/junit.xml --html=reports/test_report.html --self-contained-html
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          ai_shopify_search/reports/
          ai_shopify_search/test_results.json
    
    - name: Stop server
      run: |
        if [ -f ai_shopify_search/server.pid ]; then
          kill $(cat ai_shopify_search/server.pid) || true
        fi

  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: findly_loadtest
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ai_shopify_search/requirements_minimal.txt
        pip install -r ai_shopify_search/requirements_dev.txt
    
    - name: Create necessary directories
      run: |
        mkdir -p logs
        mkdir -p data/databases
        mkdir -p load_test/reports
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/findly_loadtest" >> $GITHUB_ENV
        echo "REDIS_HOST=localhost" >> $GITHUB_ENV
        echo "REDIS_PORT=6379" >> $GITHUB_ENV
        echo "REDIS_DB=0" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> $GITHUB_ENV
    
    - name: Wait for services
      run: |
        echo "Waiting for PostgreSQL..."
        while ! pg_isready -h localhost -p 5432 -U postgres; do
          sleep 1
        done
        echo "PostgreSQL is ready!"
        
        echo "Waiting for Redis..."
        while ! redis-cli -h localhost -p 6379 ping; do
          sleep 1
        done
        echo "Redis is ready!"
    
    - name: Start FastAPI server
      run: |
        cd ai_shopify_search
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        echo $! > server.pid
        sleep 15  # Wait for server to start
    
    - name: Wait for server
      run: |
        echo "Waiting for FastAPI server..."
        for i in {1..30}; do
          if curl -f http://localhost:8000/health; then
            echo "Server is ready!"
            break
          fi
          sleep 2
        done
    
    - name: Run load tests
      run: |
        cd load_test
        locust -f locustfile.py --host=http://localhost:8000 --users=50 --spawn-rate=5 --run-time=5m --headless --html=reports/locust_report.html --csv=reports/locust_stats
    
    - name: Upload load test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: load-test-results
        path: load_test/reports/
    
    - name: Stop server
      run: |
        if [ -f ai_shopify_search/server.pid ]; then
          kill $(cat ai_shopify_search/server.pid) || true
        fi

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ai_shopify_search/requirements_dev.txt
    
    - name: Run Black
      run: |
        cd ai_shopify_search
        black --check --diff .
    
    - name: Run isort
      run: |
        cd ai_shopify_search
        isort --check-only --diff .
    
    - name: Run flake8
      run: |
        cd ai_shopify_search
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Run mypy
      run: |
        cd ai_shopify_search
        mypy . --ignore-missing-imports

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Bandit security scan
      uses: python-security/bandit-action@v1.0.0
      with:
        path: ai_shopify_search/
        level: medium
        format: json
        output: security-report.json
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: security-report.json

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, load-test, code-quality, security]
    if: always()
    
    steps:
    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: test-results
        path: test-results/
    
    - name: Download load test results
      uses: actions/download-artifact@v3
      with:
        name: load-test-results
        path: load-test-results/
    
    - name: Generate summary
      run: |
        echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
        if [ -f test-results/test_results.json ]; then
          echo "✅ Tests completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "## 📊 Load Test Results" >> $GITHUB_STEP_SUMMARY
        if [ -f load-test-results/locust_report.html ]; then
          echo "✅ Load tests completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Load tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "## 🔒 Security Scan" >> $GITHUB_STEP_SUMMARY
        if [ -f security-report.json ]; then
          echo "✅ Security scan completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security scan failed" >> $GITHUB_STEP_SUMMARY
        fi 