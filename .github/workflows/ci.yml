name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests with Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ai_shopify_search/requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock pytest-xdist
        pip install flake8 mypy radon black isort
    
    - name: Run tests with coverage
      working-directory: ai_shopify_search
      run: |
        # TODO: Re-enable coverage threshold once tests are expanded.
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing --junitxml=test-results.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ai_shopify_search/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: ai_shopify_search/test-results.xml
        retention-days: 30
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: ai_shopify_search/htmlcov/
        retention-days: 30

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy radon
    
    - name: Run flake8
      working-directory: ai_shopify_search
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Run black (check only)
      working-directory: ai_shopify_search
      run: |
        black --check --diff .
    
    - name: Run isort (check only)
      working-directory: ai_shopify_search
      run: |
        isort --check-only --diff .

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ai_shopify_search/requirements.txt
        pip install mypy types-redis types-requests
    
    - name: Run mypy
      working-directory: ai_shopify_search
      run: |
        mypy . --ignore-missing-imports --disallow-untyped-defs --disallow-incomplete-defs

  complexity:
    name: Code Complexity Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install radon
      run: |
        python -m pip install --upgrade pip
        pip install radon
    
    - name: Check code complexity
      working-directory: ai_shopify_search
      run: |
        # Check cyclomatic complexity
        radon cc . -a -s --min C
        # Check maintainability index
        radon mi . -s
        # Check raw metrics
        radon raw . -s

  security:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit
    
    - name: Run bandit security check
      working-directory: ai_shopify_search
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt -o bandit-report.txt || true
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: |
          ai_shopify_search/bandit-report.json
          ai_shopify_search/bandit-report.txt
        retention-days: 30

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, lint, type-check, complexity]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ai_shopify_search/requirements.txt
        pip install pytest pytest-asyncio pytest-mock
    
    - name: Run integration tests
      working-directory: ai_shopify_search
      env:
        REDIS_URL: redis://localhost:6379
        DATABASE_URL: sqlite:///./test_integration.db
      run: |
        python -m pytest tests/integration/ -v --tb=short

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, lint, type-check, complexity, integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      working-directory: ai_shopify_search
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-package
        path: ai_shopify_search/dist/
        retention-days: 30

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment steps here
        # Example: docker build, docker push, kubectl apply, etc.

  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, lint, type-check, complexity, integration]
    if: failure()
    
    steps:
    - name: Notify failure
      run: |
        echo "One or more CI checks failed!"
        # Add your notification logic here (Slack, email, etc.) 