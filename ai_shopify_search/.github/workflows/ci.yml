name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  REDIS_VERSION: '7.0'
  POSTGRES_VERSION: '15'

jobs:
  # Test Job - Core functionality testing
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: findly_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock
        pip install black isort flake8 mypy bandit safety
        
    - name: 🧪 Run unit tests
      run: |
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=35
        
    - name: 🧪 Run integration tests
      run: |
        pytest tests/test_api_endpoints.py tests/test_search_service.py -v
        
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Code Quality Job - Linting, formatting, type checking
  code-quality:
    name: 🔍 Code Quality Checks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety pre-commit
        
    - name: 🎨 Check code formatting (Black)
      run: |
        black --check --diff .
        
    - name: 📝 Check import sorting (isort)
      run: |
        isort --check-only --diff .
        
    - name: 🔍 Run linting (flake8)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: 🔍 Run type checking (mypy)
      run: |
        mypy . --ignore-missing-imports --disallow-untyped-defs --disallow-incomplete-defs
        
    - name: 🔒 Run security scanning (Bandit)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt -o bandit-report.txt || true
        
    - name: 🔒 Check for known vulnerabilities (Safety)
      run: |
        safety check --json --output safety-report.json || true
        safety check --text --output safety-report.txt || true

  # Security Job - Advanced security checks
  security:
    name: 🛡️ Security Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
        
    - name: 🔍 Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
        outputFormat: sarif
        outputFile: semgrep-results.sarif
        
    - name: 📊 Upload Semgrep results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: semgrep-results.sarif

  # Performance Job - Performance testing
  performance:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: test
    
    services:
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: findly_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install performance testing tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust pytest-benchmark
        
    - name: ⚡ Run performance tests
      run: |
        pytest tests/performance/ -v --benchmark-only || echo "No performance tests found"
        
    - name: 📊 Generate performance report
      run: |
        echo "Performance testing completed"
        # Add performance reporting logic here

  # Build Job - Docker build and validation
  build:
    name: 🐳 Build & Validate
    runs-on: ubuntu-latest
    needs: [test, code-quality, security]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'findly-ai-search:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Trivy results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-results.sarif

  # Deploy to Staging (on main branch)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, code-quality, security, build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Build Docker image
      run: |
        docker build -t findly-ai-search:staging .
        
    - name: 🚀 Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment logic here
        
    - name: 🧪 Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test logic here

  # Deploy to Production (manual trigger)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, code-quality, security, build]
    if: github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Build Docker image
      run: |
        docker build -t findly-ai-search:production .
        
    - name: 🚀 Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment logic here
        
    - name: 🧪 Run production tests
      run: |
        echo "Running production tests..."
        # Add production test logic here

  # Notifications
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [test, code-quality, security, build]
    if: always()
    
    steps:
    - name: 📊 Generate summary
      run: |
        echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Completed Jobs:" >> $GITHUB_STEP_SUMMARY
        echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        
    - name: 📧 Send notification (optional)
      if: failure()
      run: |
        echo "Pipeline failed - notification would be sent here"
        # Add notification logic here (Slack, email, etc.) 